# Pipeline for producing Azure Site Extension: FrontDoorHostRewriteModule
# https://www.nuget.org/packages/FrontDoorHostRewriteModule

resources:
  repositories:
  - repository: sitefinity-ci
    type: git
    name: sitefinity-ci
    ref: master

trigger: none

pool:
  name: Sitefinity Core
  demands: distribution-builds

variables:
  solution: 'FrontDoorHostRewriteModule/**/HostRewriteModule.sln'
  buildConfiguration: 'Release'
  major: 1
  minor: 0
  patch: 1
  NugetVersion: $(major).$(minor).$(patch)

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build

    steps:
    - checkout: self
    - checkout: sitefinity-ci
    - task: NuGetToolInstaller@1
    - task: VSBuild@1
      displayName: Build solution
      inputs:
        solution: '$(solution)'
        platform: 'x64'
        configuration: '$(buildConfiguration)'
        msbuildArchitecture: 'x64'
        createLogFile: true

    - task: NuGetCommand@2
      displayName: Create nuget package
      inputs:
        command: 'pack'
        packagesToPack: 'FrontDoorHostRewriteModule/**/HostRewriteModule.nuspec'
        packDestination: '$(Build.ArtifactStagingDirectory)/packages'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'NugetVersion'

    - task: PowerShell@2
      displayName: SignNugetPackage
      inputs:
        targetType: inline
        script: | 
          . "$(Build.SourcesDirectory)\sitefinity-ci\Distribution\CommonScripts\Config.ps1"
      
          $env:configJson = ConvertTo-Json $mainBuildConfig -Depth 5 -Compress
          Import-Module -Name $(Build.SourcesDirectory)\sitefinity-ci\Distribution\DistributionBuildModules\NuGetPackages.psm1 -DisableNameChecking -ArgumentList $env:configJson
          SignNugetPackages -directory $(Build.ArtifactStagingDirectory)

    - publish: $(Build.ArtifactStagingDirectory)/packages
      artifact: packages

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'production'
    
    strategy:
      runOnce:
        deploy:

          steps:
          - download: current
            artifact: 'packages'

          - task: NuGetCommand@2
            displayName: Push nuget package
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/packages/*.nupkg;'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'www.nuget.org/api/v2/'