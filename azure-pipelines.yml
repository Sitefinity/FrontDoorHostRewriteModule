# Pipeline for producing Azure Site Extension: FrontDoorHostRewriteModule
# https://www.nuget.org/packages/FrontDoorHostRewriteModule

resources:
  repositories:
  - repository: sitefinity-ci
    type: git
    name: sitefinity-ci
    ref: master

trigger: none

variables:
- group: DistributionBuild_Signing
- name: vmImageName
  value: 'windows-latest'
- name: solution
  value: '**/HostRewriteModule.sln'
- name: buildConfiguration
  value: 'Release'
- name: major
  value: 1
- name: minor
  value: 0
- name: patch
  value: 2
- name: NugetVersion
  value: $(major).$(minor).$(patch)

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - checkout: self
    - task: VSBuild@1
      displayName: Build solution
      inputs:
        solution: '$(solution)'
        platform: 'x64'
        configuration: '$(buildConfiguration)'
        msbuildArchitecture: 'x64'
        createLogFile: true

    - task: NuGetCommand@2
      displayName: Create nuget package
      inputs:
        command: 'pack'
        packagesToPack: '**/HostRewriteModule.nuspec'
        packDestination: '$(Build.ArtifactStagingDirectory)/unsignedPackages'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'NugetVersion'

    - publish: $(Build.ArtifactStagingDirectory)/unsignedPackages
      artifact: unsignedPackages

  - job: SignNugetPackage
    displayName: Sign Nuget Package
    dependsOn: Build
    pool:
      name: Sitefinity Core
      demands: distribution-builds
    workspace:
      clean: all

    steps:
    - checkout: sitefinity-ci

    - download: current
      artifact: 'unsignedPackages'
    
    - task: DownloadSecureFile@1
      name: SigningCertificate
      displayName: Download CA certificate
      inputs:
        secureFile: 'ProgressCodeSign.pfx'
    
    - task: PowerShell@2
      displayName: Install CA Cert
      inputs:
        targetType: 'inline'
        script: |
          Write-Host Installing $(SigningCertificate.secureFilePath) to the trusted CA directory...
          $caSecString = ConvertTo-SecureString '$(caPwd)' -AsPlainText -Force 
          Import-PfxCertificate -FilePath $(SigningCertificate.secureFilePath) -CertStoreLocation Cert:\LocalMachine\My -Password $caSecString
    
    - task: PowerShell@2
      displayName: SignNugetPackage
      inputs:
        targetType: inline
        script: | 
          . "$(Build.SourcesDirectory)\Distribution\CommonScripts\Config.ps1"
      
          $env:configJson = ConvertTo-Json $mainBuildConfig -Depth 5 -Compress
          Import-Module -Name $(Build.SourcesDirectory)\Distribution\DistributionBuildModules\NuGetPackages.psm1 -DisableNameChecking -ArgumentList $env:configJson
          SignNugetPackages -directory $(Pipeline.Workspace)\unsignedPackages

    - publish: $(Pipeline.Workspace)/unsignedPackages
      artifact: signedPackages

    - task: PowerShell@2
      displayName: Remove CA certificate
      inputs:
        targetType: inline
        script: |
          . "$(Build.SourcesDirectory)\sitefinity-ci\Distribution\CommonScripts\Config.ps1"
          Get-ChildItem Cert:\LocalMachine\My | Where-Object { $_.Thumbprint -eq $commonConfig.Signing.sha1Hash } | Remove-Item

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'production'
    pool:
      vmImage: $(vmImageName)

    strategy:
      runOnce:
        deploy:

          steps:
          - download: current
            artifact: 'signedPackages'

          - task: NuGetCommand@2
            displayName: Push nuget package
            inputs:
              command: 'push'
              packagesToPush: '$(Pipeline.Workspace)/signedPackages/*.nupkg;'
              nuGetFeedType: 'external'
              publishFeedCredentials: 'www.nuget.org/api/v2/'
